# From qcodes station config, the first field must be instruments for instruments config
instruments:
  # Name of the instrument
  rr:
    # The class of the instrument
    type: instrumentserver.testing.dummy_instruments.rf.ResonatorResponse
    # If initialize is true, the server will create an instance of this instrument at startup
    initialize: True

  dummy:
    type: instrumentserver.testing.dummy_instruments.generic.DummyInstrumentWithSubmodule
    initialize: true
    # If you want to specify any configuration for the gui, it must be under the gui field.
    gui:
      # Indicates the class of the widget that will be shown when the instrument window is open.
      # Can be either 'generic' or the python class for it
      type: generic
      # any item under kwargs will be passed to the constructor of the widget as kwargs.
      # The following are kwargs specifically for the generic widget
      kwargs:

        # Any parameters inside parameters-hide will never be loaded or shown.
        parameters-hide:
          - A
          - B.ch0
          - IDN

        # Any parameters inside parameters-star will start being starred.
        parameters-star:
          - param0
          - C

        # Any parameters inside parameters-trash will start trashed.
        parameters-trash:
          - param1

        # Any methods inside methods-hide will never be loaded or shown.
        methods-hide:
          - C.dummy_function

        # Any methods inside methods-star will start being starred.
        methods-star:
          - A
          - test_func

        # Any methods inside methods-star will start being starred.
        methods-trash:
          - B

  parameter_manager:
    type: instrumentserver.params.ParameterManager
    initialize: True

    gui:
      # By having the parameter manager GUI as the gui type, we can have it directly in the server instead of on a separate window.
      type: instrumentserver.gui.instruments.ParameterManagerGui
